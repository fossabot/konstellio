// Code generated by konstellio (@konstellio/cli@0.2.9). DO NOT EDIT.
// Please don't change this file manually but run `konstellio generate` to update it.
// For more information, please read the docs: https://konstell.io/docs/cli/

module.exports = {
	typeDefs: `
		scalar ID
		
		scalar Cursor
		
		scalar Date
		
		scalar DateTime
		
		directive @indexes(indexes: [DirectiveIndex!]) on OBJECT | ENUM | UNION
		
		enum DirectiveIndexType {
		  primary
		  index
		  unique
		}
		
		enum DirectiveIndexFieldDirection {
		  asc
		  desc
		}
		
		input DirectiveIndexField {
		  field: String!
		  direction: DirectiveIndexFieldDirection
		}
		
		input DirectiveIndex {
		  handle: String!
		  type: DirectiveIndexType!
		  fields: [DirectiveIndexField]!
		}
		
		directive @localized on FIELD_DEFINITION
		
		directive @computed on FIELD_DEFINITION
		
		directive @hidden on FIELD_DEFINITION
		
		directive @inlined on FIELD_DEFINITION
		
		interface Node {
		  id: ID!
		}
		
		type Query {
		  latestPost(first: Int, after: Cursor): [PostCursor!]!
		  me: User! @permission(role: "auth.loggedin")
		}
		
		type Mutation {
		  createPost(data: PostInput): Boolean
		  login(username: String!, password: String!): LoginResponse @permission(role: "auth.loggedout")
		}
		
		type Subscription {
		  postAdded: Post
		}
		
		type Post implements Node @collection(indexes: [{handle: "Post_slug", type: "unique", fields: [{field: "slug", direction: "asc"}]}]) {
		  id: ID!
		  title: String! @localized
		  slug: String! @localized
		  categories: [PostCategory!]!
		  postDate: DateTime!
		  expireDate: DateTime
		  author: User!
		  contributors: [User!]!
		  content: String! @localized
		}
		
		type PostCategory implements Node @collection(type: "structure") {
		  id: ID!
		  title: String! @localized
		  slug: String! @localized
		}
		
		type PostCursor {
		  cursor: String
		  item: Post!
		}
		
		directive @permission(role: String, roles: [String!]) on FIELD_DEFINITION
		
		type UserGroup implements Node @collection {
		  id: ID!
		  name: String!
		  roles: [String!]!
		}
		
		type User implements Node @collection(indexes: [{handle: "User_username", type: "unique", fields: [{field: "username", direction: "asc"}]}]) {
		  id: ID!
		  username: String!
		  password: String! @hidden
		  groups: [UserGroup!]!
		}
		
		type LoginResponse {
		  token: String!
		}
		
		type LogoutResponse {
		  acknowledge: Boolean!
		}
		
		input PostInput {
		  title: LStringInput!
		  slug: LStringInput!
		  categories: [ID!]!
		  postDate: DateTime!
		  expireDate: DateTime
		  author: ID!
		  contributors: [ID!]!
		  content: LStringInput!
		}
		
		input PostCategoryInput {
		  title: LStringInput!
		  slug: LStringInput!
		}
		
		input PostCursorInput {
		  cursor: String
		  item: ID!
		}
		
		input UserGroupInput {
		  name: String!
		  roles: [String!]!
		}
		
		input UserInput {
		  username: String!
		  password: String!
		  groups: [ID!]!
		}
		
		input LoginResponseInput {
		  token: String!
		}
		
		input LogoutResponseInput {
		  acknowledge: Boolean!
		}
		
		input LStringInput {
		  fr: String!
		  en: String!
		}
		
	`,
	resolvers: {}
};