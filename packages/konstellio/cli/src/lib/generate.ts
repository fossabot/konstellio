const { version } = require('../../package.json');
import { Service } from './parseConfiguration';
import * as rimraf from 'rimraf';
import { promisify, isArray } from 'util';
import * as fs from 'fs';
import * as path from 'path';
import * as mkdirp from 'mkdirp';
import { parse, print } from 'graphql';
import { mergeDocuments } from './mergeDocuments';
import { baseSchema } from './baseSchema';
import { generatorTypescript } from './generatorTypescript';
import { trimDocument } from './trimDocument';
import { createInputType } from './createInputType';

const rmtree = promisify(rimraf);
const readFile = promisify(fs.readFile);
const writeFile = promisify(fs.writeFile);
const fileExists = promisify(fs.exists);
const mkdir = promisify(mkdirp);

const header = `// Code generated by konstellio (@konstellio/cli@${version}). DO NOT EDIT.
// Please don't change this file manually but run \`konstellio generate\` to update it.
// For more information, please read the docs: https://konstell.io/docs/cli/

`;

export async function generate(service: Service): Promise<void> {
	const destination = service.generate
		? path.resolve(service.generate.destination)
		: undefined;
	
	if (!destination) {
		throw new Error(`Can not generate code without destination.`);
	}

	await rmtree(destination);
	await mkdir(destination);

	const locales = service.locales ? Object.keys(service.locales) : [];
	const schemaFiles = await gatherSchemaFiles(service);
	const schemaBuffers = await Promise.all(schemaFiles.map(file => readFile(file)));
	const documents = [parse(baseSchema)].concat(schemaBuffers.map(schema => parse(schema.toString('utf8'))));

	const tmpDocument = mergeDocuments(documents);
	const inputDocument = createInputType(tmpDocument, locales);

	const document = mergeDocuments(documents.concat([inputDocument]));
	await writeFile(path.join(destination, 'schema.js'), `${header}module.exports = {
	typeDefs: \`
		${print(document).split(`\n`).join(`\n\t\t`)}\n\t\`,
	resolvers: {}
};`);

	const trimmedDocument = mergeDocuments([trimDocument(document), inputDocument]);
	const types = generatorTypescript(trimmedDocument, locales);
	await writeFile(path.join(destination, 'index.d.ts'), `${header}${types}`);
}

async function gatherSchemaFiles(service: Service): Promise<string[]> {
	const locations: string[] = [];

	for (const schema of service.schema) {
		const location = path.resolve(service.root, schema);
		if (fileExists(location)) {
			locations.push(location);
		}
	}

	for (const pkg of service.import) {
		locations.push(...await gatherSchemaFiles(pkg));
	}

	return locations;
}